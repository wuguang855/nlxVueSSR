const url = require('url');
const fs = require('fs')
const path = require('path')
const LRU = require('lru-cache')
const express = require('express');
const cookieParser = require('cookie-parser');
//const log = require("./logHelper");
const manageCookies = require("./vueCookies.js");

const { createBundleRenderer } = require('vue-server-renderer')

const resolve = file => path.resolve(__dirname, file)
const isProd = process.env.NODE_ENV !== 'development'
const useMicroCache = process.env.MICRO_CACHE !== 'false'

const vueServer = express();
vueServer.use(cookieParser());
vueServer.use(manageCookies());
const template = fs.readFileSync(resolve('../entry/index.template.html'), 'utf-8')
const createRenderer = function createRenderer (bundle, options) {
  // https://github.com/vuejs/vue/blob/dev/packages/vue-server-renderer/README.md#why-use-bundlerenderer
  return createBundleRenderer(bundle, Object.assign(options, {
    template,
    // for component caching
    cache: LRU({
      max: 1000,
      maxAge: 1000 * 60 * 15
    }),
    // this is only needed when vue-server-renderer is npm-linked
    basedir:resolve('../dist'),
    // recommended for performance
    runInNewContext: false
  }))
}

let renderer
let readyPromise
if (isProd) {
  // In production: create server renderer using built server bundle.
  // The server bundle is generated by vue-ssr-webpack-plugin.
  const bundle = require('../dist/vue-ssr-server-bundle.json')
  // The client manifests are optional, but it allows the renderer
  // to automatically infer preload/prefetch links and directly add <script>
  // tags for any async chunks used during render, avoiding waterfall requests.
  const clientManifest = require('../dist/vue-ssr-client-manifest.json')
  renderer = createRenderer(bundle, {
    clientManifest
  })
} else {
  // In development: setup the dev server with watch and hot-reload,
  // and create a new renderer on bundle / index template update.
  readyPromise = require('../build/setup-dev-server.js')(vueServer, (bundle, options) => {
    renderer = createRenderer(bundle, options)
  })
}
// 1-second microcache.
// https://www.nginx.com/blog/benefits-of-microcaching-nginx/
const microCache = LRU({
  max: 100,
  maxAge: 1000
})

// since this app has no user-specific content, every page is micro-cacheable.
// if your app involves user-specific content, you need to implement custom
// logic to determine whether a request is cacheable based on its url and
// headers.
const cacheList = JSON.parse(fs.readFileSync(resolve("./cacheList.json"), "utf8")); 

const isCacheable = (req) => {
	if(!useMicroCache) return false;
  for(var i in cacheList){
    if(cacheList[i] == url.parse(req.url).pathname) return true;
  }
  return false;
}

const render = function render (req, res,next) {
  const s = Date.now()
  const serverInfo =
  `express/${require('express/package.json').version} ` +
  `vue-server-renderer/${require('vue-server-renderer/package.json').version}`

  res.setHeader("Content-Type", "text/html")
  res.setHeader("Server", serverInfo)

  const handleError = err => {
    if (err.url) {
      res.redirect(err.url)
    } else if(err.code === 404) {
      res.status(404).end('404 | Page Not Found')
    //  log.err(`404 |  Page < ${req.url} >Not Found`);     
    } else {
      // Render Error Page or Redirect
      res.status(500).end('500 | Internal Server Error')
    //  log.err(`500 | error during render : ${req.url}`)
    //  log.err(err.stack)
    }
  }

  //const cacheable = isCacheable(req)
  const cacheable = false
  if (cacheable) {
    const hit = microCache.get(req.url)
    if (hit) {
      if (!isProd) {
        console.log(`cache hit!`)
      }
      return res.end(hit)
    }
  }

  const context = {
    title: '贵州遵义茶叶交易中心', // default title
    url: req.url,
    cookies: req.cookies
  }
  renderer.renderToString(context, (err, html) => {
    if (err) {
      return handleError(err)
    }
    res.end(html)
    if (cacheable) {
      microCache.set(req.url, html)
    }
    if (!isProd) {
      console.log(`whole request: ${Date.now() - s}ms`)
    }
  })
  //next();
}

vueServer.get('*', isProd ? render : (req, res,next) => {
  readyPromise.then(() => render(req, res))
  //next();
})


module.exports = vueServer;
